(function() {
  if (inIframe()) { // if this widget was loaded inside iframe in 3rd party's website
    var authParams = {};

    var proxy = new easyXDM.Rpc({
    }, {
      local: {
        setClient: function(lang, size, params, successFn, errorFn) {
          if (isObject(params)) {
            authParams = params;
          } else {
            authParams.client_id = params;
          }

          var btn = document.getElementById('kakao-login-btn');
          btn.className = lang + ' ' + size;

          return {
            width: btn.offsetWidth,
            height: btn.offsetHeight
          };
        },
        setStateToken: function(authTranId, successFn, errorFn) {
          window.document.getElementById('kakao-login-btn').onclick = function() {
            window.open(getAuthURL(authTranId), '', 'width=480, height=520');
          };
        },
        deleteAuthCookie: function(successFn, errorFn) {
          deleteCookie('_kawlt', '.kakao.com', '/');
          deleteCookie('_maldive_oauth_si', '.kakao.com', '/');
          return true;
        },
        getCode: function(authTranId, clientId, ka) {
          reqwest({
            url: '/apiweb/code.json',
            method: 'get',
            data: {
              auth_tran_id: authTranId,
              client_id: clientId,
              ka: (typeof ka === 'string') ? ka : '',
            },
            success: function(res){
              proxy.postResponse(res)
            },
            error: function (err) {
              proxy.postResponse(getErrorObj(err))
            }
          });
        },
        getAccessToken: function(code, appKey, redirectUri, approvalType) {
          reqwest({
            url:'/oauth/token',
            method: 'post',
            headers: {
              KA: getKakaoAgent(),
            },
            data:{
              grant_type: 'authorization_code',
              code: code,
              redirect_uri: redirectUri,
              client_id: appKey,
              approval_type: approvalType === 'project' ? 'project' : 'individual',
              client_origin: getProxyOrigin()
            },
            success: function(res) {
              proxy.postResponse(res)
            },
            error: function (err) {
              proxy.postResponse(getErrorObj(err))
            }
          });
        }
      },
      remote: {
        postResponse: {},
        getKakaoAgent: {}
      }
    });

    window.postResponse = function(data) {
      var copy = {};
      easyXDM.apply(copy, data); // workaround for IE8 JSON serialization bug.
      proxy.postResponse(copy, function(res) {

      }, function(err) {
        console.log('Error: ' + JSON.stringify(err));
      });
    };

    window.getProxyOrigin = function() {
      return proxy.origin;
    };

    var kakaoAgent = 'os/javascript'; // placeholder
    window.getKakaoAgent = function() {
      return kakaoAgent;
    };

    proxy.getKakaoAgent(function(agentString) {
      kakaoAgent = agentString;
    }, function(error) { // on procedure not found
      kakaoAgent = 'sdk/<=1.0.3 os/javascript' +
        ' lang/' + (navigator.userLanguage || navigator.language) +
        ' device/' + navigator.platform.replace(/ /g, '_');
    });
  }

  function getAuthURL(authTranId) {
    var queryParams = {
      redirect_uri: 'kakaojs',
      response_type: 'code',
      auth_tran_id: authTranId
    };

    for (var key in authParams) {
      if (authParams.hasOwnProperty(key)) {
        queryParams[key] = authParams[key];
      }
    }

    return '/oauth/authorize?' + buildQueryString(queryParams);
  }

  function getErrorObj(err) {
    try {
      var error = JSON.parse(err.responseText);
      return {"error": error.error, "error_description": error.error_description};
    } catch (error) {
      return {"error": "unknown", "error_description": "failed to parse error"};
    }
  }

  function deleteCookie(name, domain, path) {
    var domain = domain || document.domain;
    var path = path || "/";
    document.cookie = name + "=; expires=Thu, 01 Jan 1970 00:00:00 GMT; domain=" + domain + "; path=" + path;
  }

  function isObject(obj) {
    return obj === Object(obj);
  }

  function buildQueryString(params) {
    var ret = [];
    for (var key in params) {
      if (!params.hasOwnProperty(key))
        continue;

      var value = params[key];
      if (isObject(value)) {
        value = JSON.stringify(value);
      }

      ret.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
    }

    return ret.join('&');
  };


  function inIframe() {
    try {
      return window.self !== window.top;
    } catch (e) {
      return true;
    }
  }
}());
